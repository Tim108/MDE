modeltype JAVA uses 'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java';
modeltype ourJava uses 'http://www.example.org/ourjava';

transformation java2ourJava(in java : JAVA, out ourJava);

main()  {
  java -> objectsOfType(java::Model) -> asOrderedSet() -> first() -> map transformModel2Root();
}

mapping java::Model::transformModel2Root() : ourJava::Root{
	name := self.name;
	ownedPackage := self.ownedElements -> map transformPackage();
}

mapping java::Package::transformPackage() : ourJava::Package{
	name := self.name;
	subPackage := self.ownedPackages -> map transformPackage();
	root := self.model.resolveone(ourJava::Root);
	package := self.package.resolveone(ourJava::Package);
	ownedClass := self.ownedElements.oclAsType(java::ClassDeclaration) -> map transformClass();
	ownedInterface := self.ownedElements.oclAsType(java::InterfaceDeclaration) -> map transformInterface();
}

mapping java::InterfaceDeclaration::transformInterface() : ourJava::Interface{
	name := self.name;
	package := self.package.resolveone(ourJava::Package);
}

mapping java::ClassDeclaration::transformClass() : ourJava::Class{
	name := self.name;
	package := self.package.resolveone(ourJava::Package);
	superClass := self.superClass.type.oclAsType(java::ClassDeclaration).late resolveone(ourJava::Class);

	//use late resolve to do it after the transformation --> for imports	
	var importedNamedElement : Set(java::NamedElement) := self.originalCompilationUnit.imports -> collect(i | i.importedElement) -> asSet();

	var importedClasses : Set(java::ClassDeclaration) := importedNamedElement -> selectByType(java::ClassDeclaration);

	var importedInterfaces : Set(java::InterfaceDeclaration) := importedNamedElement -> selectByType(java::InterfaceDeclaration);

	imports += importedClasses -> map makeImport1();
	imports += importedInterfaces -> map makeImport2();
	log("--- " + name + " ---------------------------------");
	imports -> forEach(e){log('import: ' + e.name + '->' + e.toString())};
	log("--------------------------------------------------");
	
	method += self.bodyDeclarations -> selectByType(java::MethodDeclaration) -> map transformMethod(self);
	
}

mapping java::ClassDeclaration::makeImport1() : ourJava::Import{
	log("making import of " + self.name);
	importedClass := self.late resolveone(ourJava::Class);
	if(importedClass = null){importedClass := self.map transformClass();};
	name := self.name;
	var herman := self.usagesInTypeAccess -> collect(t | t.qualifier)
}

mapping java::InterfaceDeclaration::makeImport2() : ourJava::Import{
	log("making import of " + self.name);
	importedInterface := self.late resolveone(ourJava::Interface);
	if(importedInterface = null){importedInterface := self.map transformInterface();};
	name := self.name;
}

mapping java::MethodDeclaration::transformMethod(ownerOld : java::ClassDeclaration) : ourJava::Method{
	name := self.name;
	owner := ownerOld.resolveone(ourJava::Class);
	log(owner.name + ':' + self.name);
	var classdecls := self.body.getAllTypeAccess();
	classdecls -> forEach(c){usesClass += c.late resolve(ourjava::Class)};
}

query java::Block::getAllTypeAccess() : Set(java::ClassDeclaration){
	var typeAccesses : Set(java::ClassDeclaration);
	
	//general
	var vardecls := self.statements -> selectByType(java::VariableDeclarationStatement);
	var tempTypeAccess := vardecls -> collect(ta | ta.type);
	var tempTypes := tempTypeAccess -> collect(e | e.type);
	typeAccesses += tempTypes -> selectByType(java::ClassDeclaration) -> asSet();
	
	//in if
	var ifs := self.statements -> selectByType(java::IfStatement);
	typeAccesses += ifs -> collect(e | e.thenStatement.oclAsType(java::Block).getAllTypeAccess());
	
	return typeAccesses;
}









