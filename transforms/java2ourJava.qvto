modeltype JAVA uses 'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java';
modeltype ourJava uses 'http://www.example.org/ourjava';

transformation java2ourJava(in java : JAVA, out ourJava);

main()  {
  //java.rootObjects()[Model]->asOrderedSet()->first()-> map Model2Root();
  java -> objectsOfType(java::Model) -> asOrderedSet() -> first() -> map transformModel2Root();
  java -> objectsOfType(java::Package) -> asOrderedSet() -> first() -> map transformPackage();
  java -> objectsOfType(java::InterfaceDeclaration) -> asOrderedSet() -> first() -> map transformInterface();
  java -> objectsOfType(java::ClassDeclaration) -> asOrderedSet() -> first() -> map transformClass();
}

mapping java::Model::transformModel2Root() : ourJava::Root{
	name := self.name;
}

mapping java::Package::transformPackage() : ourJava::Package{
	name := self.name;
	subPackage := self.ownedPackages -> map transformPackage();
	root := self.model.resolveone(ourJava::Root);
}

mapping java::InterfaceDeclaration::transformInterface() : ourJava::Interface{
	name := self.name;
	package := self.package.resolveone(ourJava::Package);
}

mapping java::ClassDeclaration::transformClass() : ourJava::Class{
	init{
		var classes : Set(java::ClassDeclaration) := java -> objectsOfType(java::ClassDeclaration) -> asOrderedSet() -> first();
	}
	name := self.name;
	package := self.package.resolveone(ourJava::Package);
	
	log(self.name);
	
	//use late resolve to do it after the transformation --> for imports	
	var importedNamedElement : Set(java::NamedElement) := self.originalCompilationUnit.imports -> collect(i | i.importedElement) -> asSet();
	log("importedNamedElement");
	importedNamedElement -> forEach(e){log(e.repr())};
	log("/importedNamedElement");
	
	log("importedClasses");
	var importedClasses : Set(java::ClassDeclaration) := importedNamedElement -> selectByType(java::ClassDeclaration);
	importedClasses -> forEach(e){log(e.repr())};
	log("/importedClasses");
	
	log("importedInterfaces");
	var importedInterfaces : Set(java::InterfaceDeclaration) := importedNamedElement -> selectByType(java::InterfaceDeclaration);
	importedInterfaces -> forEach(e){log(e.repr())};
	log("/importedInterfaces");
	
	//var importedUnresolvedItems : Set(java::UnresolvedItem) := importedNamedElement -> selectByType(java::UnresolvedItem);
	
	imports += importedClasses -> map makeImport();
	imports += importedInterfaces -> map makeImport();
	log("--- " + name + " ---------------------------------");
	imports -> forEach(e){log(e.repr())};
	log("--------------------------------------------------");
}

mapping java::ClassDeclaration::makeImport() : ourJava::Import{
	importedClass := self.late resolveone(ourJava::Class);
	test := self.name;
}

mapping java::InterfaceDeclaration::makeImport() : ourJava::Import{
	importedInterface := self.late resolveone(ourJava::Interface);
	test := self.name;
}

mapping java::ImportDeclaration::transformImports() : ourJava::Import{
	
}








