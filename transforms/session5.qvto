modeltype UML uses 'http://www.eclipse.org/qvt/1.0.0/Operational/examples/simpleuml';

transformation session5(in uml : UML, out UML);

main()  {
  uml.rootObjects()[UML::Model]->asOrderedSet()->first()-> map model2model()
}

mapping UML::Model::model2model() : UML::Model{
	init{
	var classes : OrderedSet(UML::Class):= self.getAllClasses(); 
	var observable := object UML::Class{name :="observable"; owner := self};
	var observer := object UML::Class{name := "observer"; owner := self};
	
	var primitiveTypes : OrderedSet(UML::PrimitiveType):= self.getAllPrimitiveTypes()-> 
   		map copyprimitive()->asOrderedSet(); 
   	var associations : OrderedSet(UML::Association):= self.getAssociations();
	}
	name := self.name;
	ownedElements +=  self.getObservables() -> collect (c | c.class2observable(observable)) ;
	ownedElements += self.getMvc() -> collect (c | c.class2mvc(observer, observable)) ;
	ownedElements += self.getOther();
	
	ownedElements+=primitiveTypes;
   	ownedElements+=associations;
}

mapping UML::Class::class2mvc(obs : UML::Class, obsable : UML::Class) : OrderedSet(UML::Class){
	init{
		var genObs := object UML::Generalization{general := obs};
		var genObsable := object UML::Generalization{general := obsable};
		
		var model 		:= object UML::Class{	name:="model_" + self.name; 
						generalizations:=(self.generalizations -> append(genObsable));
						owner := self.owner};
						
		var controller 	:= object UML::Class{	name:="controller_" + self.name; 
						generalizations:=(self.generalizations -> append(genObsable));
						owner := self.owner};
						
		var genCon := object UML::Generalization{general := controller};
		
		var view 		:= object UML::Class{	name:="view_" + self.name; 
						generalizations:=(self.generalizations -> append(genObs) -> append(genCon));
						owner := self.owner};
	}
	model -> asList() -> append(controller) -> append(view);
}

mapping UML::Class::class2observable(obs : UML::Class) : UML::Class{
	init{
		var gen := object UML::Generalization{general := obs};
	}
	object UML::Class{	name:=self.name; 
						generalizations:=(self.generalizations -> append(gen));
						owner := self.owner};
}



query UML::Model::getAllClasses() : OrderedSet(UML::Class){
	return self.ownedElements[UML::Class]->asOrderedSet();
}

query UML::Model::getObservables() : OrderedSet(UML::Class){
	return self.getAllClasses() -> select(c | 
		c.stereotype -> exists(s | 
			s.equalsIgnoreCase('observable')));
}

query UML::Model::getMvc() : OrderedSet(UML::Class){
	return self.getAllClasses() -> select(c | 
		c.stereotype -> exists(s | 
			s.equalsIgnoreCase('mvc')));
}

query UML::Model::getOther() : OrderedSet(UML::Class){
	return self.getAllClasses() -> select(c | 
		c.stereotype -> isEmpty());
}






mapping UML::Model::model2flattenmodel() : UML::Model {
 init{
   	var classes : OrderedSet(UML::Class):= self.getAllClasses()-> 
   		map leafClass2Class(self)->asOrderedSet(); 
   	var primitiveTypes : OrderedSet(UML::PrimitiveType):= self.getAllPrimitiveTypes()-> 
   		map copyprimitive()->asOrderedSet(); 
   	var associations : OrderedSet(UML::Association):= self.getAssociations();
   }
   
   name:= 'flattened_'+self.name;
   ownedElements+=classes;
   ownedElements+=primitiveTypes;
   ownedElements+=associations;
   
   end{
   	self.getAllClasses()-> map assignProperties(self);
   }
}

query UML::Class::derivedAttributes() : OrderedSet(UML::Property){
  return if self.generalizations->isEmpty() then
  	self.attributes
  else
  	self.generalizations->collect(g |g.general.derivedAttributes()->
  		select(attr | not self.attributes->exists(att | att.name = attr.name)))->
  		flatten()->asOrderedSet()->union(self.attributes)->asOrderedSet()
  endif
}

query UML::Model::getAssociations() : OrderedSet(UML::Association){
	return self.getAllClasses()->select(cl | not uml.objectsOfType(UML::Generalization)->
		exists(g | g.general = cl))->collect(cl | cl.derivedAssociations(self)->
		map copyAssociation(cl))->flatten()->asOrderedSet();
}


query UML::Class::derivedAssociations( model : UML::Model) : OrderedSet(UML::Association) {
  
  return if self.generalizations->isEmpty() then
  	uml.objectsOfType(UML::Association)->select(assoc | assoc.source = self)->asOrderedSet()
  else
  	uml.objectsOfType(UML::Association)->select(assoc | assoc.source = self)->asOrderedSet()->
  		union(self.generalizations->collect(g | g.general.derivedAssociations(model))->
  		flatten()->asOrderedSet())->asOrderedSet()
  endif;
}



query UML::Model::getAllPrimitiveTypes() : OrderedSet(UML::PrimitiveType){
	return self.ownedElements[UML::PrimitiveType]->asOrderedSet();
}

mapping UML::Class::leafClass2Class(in model : UML::Model) : UML::Class
	when {not uml.objectsOfType(UML::Generalization)->exists(g | g.general = self)}
{
    name:= self.name;		
}

mapping UML::Association::copyAssociation(sourceClass : UML::Class) : UML::Association {
	name:=self.name;
	source:=sourceClass.resolveIn(UML::Class::leafClass2Class, UML::Class)->asSequence()->first();
	target:= self.target.resolveIn(UML::Class::leafClass2Class, UML::Class)->asSequence()->first();
}

mapping UML::Property::property2property() : UML::Property{
  name:= self.name;
  type:= if self.type.oclIsTypeOf(UML::PrimitiveType) 
  			then self.type.resolveIn(UML::PrimitiveType::copyprimitive, UML::PrimitiveType)
         	else self.type.resolveIn(UML::Class::leafClass2Class, UML::Class) endif -> first();
}

mapping UML::PrimitiveType::copyprimitive() : UML::PrimitiveType{
	name:= self.name;
}

mapping UML::Class::assignProperties(in model : UML::Model) : UML::Class
	when {not uml.objectsOfType(UML::Generalization)->exists(g | g.general = self)}
{
    init{
    	var targetClass : UML::Class := self.resolveoneIn(UML::Class::leafClass2Class, UML::Class);
    	targetClass.attributes:= self.derivedAttributes()->map property2property()->asOrderedSet();
    	result := targetClass;
    }		
}
